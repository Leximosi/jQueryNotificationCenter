// Generated by CoffeeScript 1.3.3

/*
NotificationCenter object instance
*/


(function() {
  var NotificationCenter, _notificationCenter;

  _notificationCenter = void 0;

  /*
  NotificationCenter class.
  Allows you to easily send notifications on OS X in supported
  browsers
  */


  NotificationCenter = (function() {

    function NotificationCenter() {
      this.notificationCenterAvailable = window.webkitNotifications != null ? true : false;
      this.notificationRequestAction = function() {};
    }

    /*
    Send a notification
    @param String notification The string that will be send
    */


    NotificationCenter.prototype.notify = function() {
      var _notification,
        _this = this;
      if (_notificationCenter.hasNotificationCenter() === true) {
        switch (this.getPermission()) {
          case 0:
            _notification = webkitNotifications.createNotification(null, this.notificationTitle, this.notificationBody);
            if (this.notificationAction !== 'undefined') {
              _notification.onclick = this.notificationAction;
            }
            return _notification.show();
          case 1:
            return webkitNotifications.requestPermission(function() {
              return _this.notify();
            });
          case 2:
            return this.notificationBlockedAction();
        }
      }
    };

    /*
    Returns whether the users browser supports Notification Center
    */


    NotificationCenter.prototype.hasNotificationCenter = function() {
      return this.notificationCenterAvailable;
    };

    /*
    Ask the user to give permission for this site.
    This can *only* be done if the user never did
    this before
    
    @param callback callback The action performed after the permission is set
    */


    NotificationCenter.prototype.askPermission = function(callback) {
      if (_notificationCenter.hasNotificationCenter() === true) {
        callback = callback || this.notificationRequestAction();
        if (webkitNotifications.checkPermission() === 1) {
          return webkitNotifications.requestPermission(callback);
        }
      }
    };

    /*
    Get the permission the user gave to this site
    
    0 = User granted permission to show notifications.
    1 = No permission set yet.
    2 = User blocked notifications.
    */


    NotificationCenter.prototype.getPermission = function() {
      if (_notificationCenter.hasNotificationCenter() === true) {
        return webkitNotifications.checkPermission();
      }
    };

    /*
    Setup the notification
    
    @param String notificationTitle
    @param String notificationBody
    @param callback notificationAction
    */


    NotificationCenter.prototype.setNotification = function(notificationTitle, notificationBody, notificationAction) {
      this.notificationTitle = notificationTitle;
      this.notificationBody = notificationBody;
      this.notificationAction = notificationAction;
    };

    /*
    Set the action performed after requesting permissions
    */


    NotificationCenter.prototype.setRequestAction = function(notificationRequestAction) {
      this.notificationRequestAction = notificationRequestAction;
    };

    /*
    Set the action performed when the user blocked notifications
    */


    NotificationCenter.prototype.setBlockedAction = function(notificationBlockedAction) {
      this.notificationBlockedAction = notificationBlockedAction;
    };

    return NotificationCenter;

  })();

  (function($) {
    return $.extend(true, {
      'NotificationCenter': function(method) {
        if (_notificationCenter === void 0) {
          _notificationCenter = new NotificationCenter();
        }
        if (NotificationCenter.prototype[method] === void 0) {
          $.error("Method: " + method + " does not exist on jQuery.NotificationCenter");
        }
        return NotificationCenter.prototype[method].apply(_notificationCenter, Array.prototype.slice.call(arguments, 1));
      }
    });
  })(jQuery);

}).call(this);
